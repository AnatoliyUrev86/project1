// МОДУЛЬ 8 ДРУГЕ ЗАНЯТТЯ
// ДЕСТРУКТУРИЗАЦІЯ об'єкта
// const city = "Kyiv";
// const user = {
//   username: "Alise",
//   age: 25,
//   skills: {
//     html: true,
//     css: true,
//     js: false,
//   },
//   city: "lviv",
// };

// const { username, age } = user;
// Для деструктуризації ми створюємо змінну {} ставемо літерал об'єкта і в середину передаємо ключі в яких
// зберігаються значення  { username, age } після дорівнює назва об'єкта user який ми хочемо деструктуризувати
// const { username, age, city } = user;
// city якщо ми додаємо ключ якого не має в нашому об'єкті ми отримаємо undefidet і для цьго щоб
// запобігти такій поведінці ми в будь яку властивість city яку ми деструктуруємо ми
// можемо присвоїти значення за замовчуванням
// const { username, age, city = "Dnipro" } = user;
// Тепер під час виклику так як ключа city в нашому об'єкті не має то відобразиться значення яке
// ми йому присвоїли "Dnipro"
// Якщо в об'єкті є така властивість із іншим значенням то буде відображатися те що в об'єкті
// тоді "Dnipro" не відобразиться під час виклику. Це в нас як резервний варіант "Dnipro"
// const { username, age, city: userCity = "Dnipro" } = user;
// cyty: userCity - за рахунок присвоєння нового значення наші змінні city
// не будуть конфліктувати в коді і під час виклику
//  userCity = "Dnipro" тут ми також можемо присвоїти значення "Dnipro" на випадок якщо city в нашому
// об'єкті може не бути
// console.log(city);
// Тепер коли ми викликаємо city ми отримаємо "Kyiv"
// console.log(userCity);
// Тепер коли ми викликаємо userCity ми отримаємо  "lviv"
// console.log(age);

// Коли ми хочемо отримати всі об'єкти разом

// const { username, ...obj } = user;
//  username - ми з ньго будемо бачити з верху його властивості а, все що йде після нього
//  ...obj - за рахунок такого запису збереться в залишковий об'єкт
// З нашого  об'єкта user деструктуризувалася наша властивість username а всі інші властивості у форматі
// ключ.значення які є в нашому об'єкті user згрупувалися в об'єкт
// ...obj наш Рест Оператор три крапки перед obj групує залишкові властивості в новий об'єкт
// ...obj - потрібно завжди додавати в кінець всього переліку тому що в іншому місці працювати не буде
// console.log(obj);

// Це приклад Глибокої Деструктуризації тому що в об'єкт user вкладено об'єкт  skills
const user = {
  username: "Alise",
  age: 25,
  skills: {
    html: true,
    css: true,
    js: false,
  },
};
// Виконання Глибокої Деструктуризації
const {
  skills: { html, css, js },
} = user;
// Ми деструктуризуємо наш об'єкт  skills: { html, css, js } ставимо після нього дві крапки фігурні дужки
// та деструктуризуємо його ще раз вписуємо в дужки його значення { html, css, js }
console.log(css);
// Під час виклику css ми у консолі будемо отримувати значення true яке має css і так по всіх властивостях
