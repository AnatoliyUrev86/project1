// МОДУЛЬ 9 2 ЗАНЯТТЯ
// 1 Локально копіюємо наш проект собі на ПК

// 2 Щоб скопіювати репозиторій потрібно настиснути в ГІТ ХАБ Зелену кнопку КОД і з віти скопіювати посилання

// 3 Переходимо в термінал і пишемо команду git clone і вставляємо посилання
// Приклад git clone https://github.com/AnatoliyUrev86/project1.git

// 4 Потім ми повинні перейти в нашу папку для роботи є два способи
// 1-й через file Open Folder і вибрати папку із назвою нашого проєкту
// 2-й в терміналі ввести команду  cd і назву папки в якій проект і Ентер

// 5 Встанови базові залежності проекту в терміналі командою npm instal але що саме ми звідси берем
// npm instal в ній є властивості які знаходяться в файлі js під назвою package.jsone і в цьму файлі
// нас цікавить наступне "devDependencies" та  "dependencies" ті пакети які прописані в цих об'єктах
// і будуть встановлені коли ми в терміналі пропишемо команду npm instal
// ми прописуємо після того коли знаходимся в актуальній папці Приклад
// git clone https://github.com/AnatoliyUrev86/project1.git і псля пишемо npm instal саме так має бути
// і тепер де наші папки та файли у нас додається папка node_modules в цій папці власне зберігаються
// всі бібліотеки плагіни які можуть бути підключені до проекту  ДАННА ПАПКА НЕ ПОВИННА БУТИ В РЕПОЗИТОРІЇ
// ТУДИ МИ ЇЇ НЕ ПУШИМО для того щоб цього уникнути ми у папці
// gitignore в ньму в середині прописуються папки та файли ЯКІ НЕ ПОТРІБНО ПУШИТИ НА ГІТ ХАБ

// 6 Наш проект зібраний за допомогою vite - він дає можливість не запускати Лайф сервер а відразу
// буде запускати його сам коли ми будемо вносити зміни або зайдемо на проект Vite Nexte Generatoin Tooling
//Команда для встановлення Vite через термінал -  npm create vite@latest

// 7 Щоб запустити режим розробки виконай команду в терміналі  npm run dev з відки береться ця команда
// в нашому файлі package.jsone в властивість scripts - і саме в ньму зберігаються команди які виконують наші дії
// після запуску команди npm run dev термінал постійно буде працювати та відслідковувати дії для того щоб це
// припинити потрібно коли курсор стоїть в терміналі натиснути Ctrl+C

// 8 Команда в терміналі  git remove -v щоб перевірити до якого репозиторію прив'язаний наш проект для того щоб
// прив'язати його до свого ГІТ ХАБУ щоб скидати зміни у свій поект портрібно
// 1 -й корк створити новий репозиторій
// 2 -й крок прописуємо команду в терміналі яка відв'яже від іншого  прив'яже до нашого репозиторія
// git remove set-url origin https://github.com/AnatoliyUrev86/project1.git і далі посилання на наш новий
// репозиторій щоб це перевірити введи команду в термінал git remove -v

// 9 Тепер треба перейти в файл package.jsone "build": "vite buld -- base=/project1/"
// "build": "vite buld base= цю частину ми залишаємо все що до неї може бути написано видаляємо
// і вставляємо назву репозиторія /project1/ до якого ми  прив'язали наш проект

// 10 При тому як ми будемо скидати зміни в ГЕТ ХАБ виникне помилка з червоним хрестиком щоб її виправити
// Settings => Actions => General => Ставимо галочки на проти Read and write permissions
// та Allow GitHub Actions to create and approve pull requests => Save
// Тепер ми тиснемо на наш червоний хрестик потім вікно відкриється тиснемо Details
// відкривається наша помилка потім тиснемо Re-run jobs вибираємо Re-ruv failed jobs і потім ще раз тиснемо
// на нього Re-ruv failed jobs коли він буде на зеленій кнопці

// ТЕПЕР ЩО ПОТРІБНО ЗРОБИТИ ЩОБ НАШ ПРОЕКТ БУВ ДОСТУПНИЙ В ІНТЕРНЕТІ

// ВСІ ПАПКИ НАШОГО ПОЕКТУ ЗБЕРІГАЮТЬСЯ В ПАПЦІ src

// Ми заходимо в налаштування і в Пейджес де ми зберігаємо сторінку вибираємо нову гілку яка створилася
// В html зявляються нові теги <load> наприклад - <load src="./partials/header.html"></load>
// В VS CODE був встановлений плагін - vite plugin html inject синтаксис  <load> саме з нього
// він дає можливість зробити окремим html файлом наш  <header> який повторюється на всіх сторінках
// і на інші html файли ми можемо наш <header> в розмітку не копіювати і тепер у кожному іншому
// html файлі ми пишемо тег  <load src="./partials/header.html"></load> - ми передаємо в src посилання
// на наш html файл де збережений код із нашим  <header>
// Такі окремі html файли розмітки  як header.html або footer.html зберігаються в окремій папці partials
// Такі html файли розмітки  як page-1.html або page-2.html, index.html, main.js
// зберігаються в окремій папці pablic
// І тепер коли ми підключили в усі наші файли html через <load src="./partials/header.html"></load> то
// можна зробити зміни на одній сторінці а вони відбудуться на всіх скільки їх ьи не було
// І тепер у нас в Пейджес зя'вляється посилання яке буде доступне в інтернеті для всіх користувачів

// в devDependencies - встановлюються пакети які будуть використовуватися під час розробки і у фінальні
// збірці проекту вони використовуватися не будуть
// В dependencies - встановлюються пакети які будуть використовуватися  у фінальні  збірці проекту
// Щоб втановити пакети devDependencies  в терміналі прописуємо команду npm i -D nanoid
// Щоб видалити пакет з devDependencies в терміналі пишемо npm uni -D nanoid - наноїд це назва пакету
// який ми хочемо видалити вона може бути різна
//  Щоб втановити пакети dependencies в терміналі прописуємо команду npm i nanoid

function add(a, b) {
  return a + b;
}
console.log(add(2, 3));
// Для того щоб не копіювати функцію на всі сторінки проекту а зробити один раз використовують
// Екма скрипт модулі
// Для того щоб експортувати нашу функцію function add напишемо наступний синтаксис export default і назву
// функції яку хочемо експортувати add
export default add;
// Імпортуємо функцію add task-13.js із файлу task-14.js
// import add from "./task-14";
// console.log(add(2, 3));
// І так ми робимо на кожній сторінці куди хочемо імпортувати нашу функцію і тепер коли зміни у функції
// відбудуться на одній сторінці автоматично відбудуться на всіх
// ЦЕЙ ФУНКЦІОНАЛ ДОСТУПНИЙ ТОМУ ЩО ПРИ ПІДКЮЧЕННІ JS ФАЙЛУ ПІСЛЯ src МИ ДОДАЄМО  type="module"

